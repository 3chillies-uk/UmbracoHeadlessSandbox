---
import colors from "@config/colors.json";
---
{
    Object.entries(colors)
        .sort()
        .map((data) => (
            <div
                class={
                    "w-1/2 md:w-1/4 lg:w-1/6 aspect-square p-4 flex flex-col items-center justify-center bg-" + data[0]
                }
            >
                <div class="text-white">
                    <div class="mix-blend-difference text-xl font-extrabold tracking-tighter sm:text-2xl md:text-3xl lg:text-4xl">
                        {data[0].toLowerCase()}
                    </div>
                    <div class="mix-blend-difference flex flex-wrap flex-row items-center w-full">
                        <span class="text-xl font-extrabold tracking-tighter">
                            {data[1].replace(/\-/g, " ").toUpperCase()}
                        </span>
                        <svg
                            data-copy={data[1].replace(/\-/g, " ").toUpperCase()}
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1"
                            stroke="currentColor"
                            class="w-8 h-8 cursor-pointer pl-2 active:scale-75"
                            role="img"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75"
                            />
                        </svg>
                    </div>
                </div>
            </div>
        ))
}


<script>
	function copyToClipboard(textToCopy: string) {
		// navigator clipboard api needs a secure context (https)
		if (navigator.clipboard && window.isSecureContext) {
			// navigator clipboard api method'
			return navigator.clipboard.writeText(textToCopy);
		}
	}

	function handleCopy(event: Event) {
		const target = event.target as HTMLButtonElement;
		if (target) {
			copyToClipboard(target.dataset.copy);
			console.log(target.dataset.copy);
		}
	}

	document.querySelectorAll("svg[data-copy]").forEach((node) => {
		node.addEventListener("click", function (node) {
			node.preventDefault();
			handleCopy(node);
		});
	});
</script>
